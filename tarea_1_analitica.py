# -*- coding: utf-8 -*-
"""Tarea_1_analitica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1moaduKtDXEWloTk-gJkz7Mc37u6fC-9P
"""

from mpl_toolkits.mplot3d import Axes3D  

import matplotlib.pyplot as plt
from matplotlib.ticker import LinearLocator
import numpy as np


fig = plt.figure()
ax = fig.gca(projection='3d')


angle = np.linspace(0, 2 * np.pi, 32)
theta1, theta2 = np.meshgrid(angle, angle)
r, R = 1.5, 3.
xlen = len(angle)
ylen = len(angle)
X = (R + r * np.cos(theta2)) * np.cos(theta1)
Y = (R + r * np.cos(theta2)) * np.sin(theta1)
Z = r * np.sin(theta2)
# Create an empty array of strings with the same shape as the meshgrid, and
# populate it with two colors in a checkerboard pattern.
colortuple = ('y', 'b')
colors = np.empty(X.shape, dtype=str)
for y in range(ylen):
    for x in range(xlen):
        colors[x, y] = colortuple[(x + y) % len(colortuple)]

# Plot the surface with face colors taken from the array we made.
surf = ax.plot_surface(X, Y, Z, facecolors=colors, linewidth=0)

# Customize the z axis.
ax.set_zlim(-3, 3)
ax.w_zaxis.set_major_locator(LinearLocator(6))

plt.show()

#import matplotlib.pyplot as plt

#l1 = 1
#l2 = 1
#theta1 = np.pi/3
#theta2 = np.pi/7

#x1 = l1*np.sin(theta1)
#y1 = -l1*np.cos(theta1)
#x2 = x1 + l2*np.sin(theta2)
#y2 = y1 - l2*np.cos(theta2)
#xvalues = [0,x1,x2]
#yvalues = [0,y1,y2]

#plt.plot(xvalues,yvalues, 'ro')
#plt.grid()
#plt.plot(xvalues,yvalues,'k-')
#plt.title('Pendulo Doble')

def grafica(theta1,theta2):
  l1 = 2
  l2 = 1
  x1 = l1*np.sin(theta1)
  y1 = -l1*np.cos(theta1)
  x2 = x1 + l2*np.sin(theta2)
  y2 = y1 - l2*np.cos(theta2)
  xvalues = [0,x1,x2]
  yvalues = [0,y1,y2]
  plt.plot(xvalues,yvalues, 'ro')
  plt.grid()
  plt.plot(0,0,'*')
  plt.plot(xvalues,yvalues,'k-')
  plt.xlim(-l1-l2,l1+l2)
  plt.ylim(-l1-l2,l1+l2)
  plt.title('Pendulo Doble de angulos theta1= %g y theta2= %g'%(theta1,theta2))
  print('Las coordenadas cartesinas del primer pendulo son(%g,%g)  y las coordenadas del segundo pendulo son (%g,%g)'%(x1,y1,x2,y2))
  plt.show()

import random
def varios_puntos(n):
  i=1
  while i<=n:
    theta1=random.uniform(0, 2*np.pi)
    theta2=random.uniform(0, 2*np.pi)
    grafica(theta1,theta2)
    i=i+1
    

varios_puntos(6)

